using System.Collections.Generic;
using UnityEngine.UIElements;
using UnityEditor;
using UnityEditor.UIElements;

namespace OmiyaGames.Saves.Editor
{
	///-----------------------------------------------------------------------
	/// <remarks>
	/// <copyright file="SaveObjectEditor.cs" company="Omiya Games">
	/// The MIT License (MIT)
	/// 
	/// Copyright (c) 2022 Omiya Games
	/// 
	/// Permission is hereby granted, free of charge, to any person obtaining a copy
	/// of this software and associated documentation files (the "Software"), to deal
	/// in the Software without restriction, including without limitation the rights
	/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	/// copies of the Software, and to permit persons to whom the Software is
	/// furnished to do so, subject to the following conditions:
	/// 
	/// The above copyright notice and this permission notice shall be included in
	/// all copies or substantial portions of the Software.
	/// 
	/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	/// THE SOFTWARE.
	/// </copyright>
	/// <list type="table">
	/// <listheader>
	/// <term>Revision</term>
	/// <description>Description</description>
	/// </listheader>
	/// <item>
	/// <term>
	/// <strong>Version:</strong> 0.2.0-exp<br/>
	/// <strong>Date:</strong> 2/20/2022<br/>
	/// <strong>Author:</strong> Taro Omiya
	/// </term>
	/// <description>
	/// Initial draft.
	/// </description>
	/// </item>
	/// </list>
	/// </remarks>
	///-----------------------------------------------------------------------
	/// <summary>
	/// Abstract editor for any <seealso cref="SaveObject"/>.
	/// </summary>
	public abstract class BaseSaveObjectEditor : UnityEditor.Editor
	{
		protected const string UXML_DIRECTORY = "Packages/com.omiyagames.saves/Editor/SaveObjects/";
		const string UXML_PATH = UXML_DIRECTORY + "BaseSaveObject.uxml";

		static readonly List<string> ERROR_HANDLING_CHOICES = new((int)ErrorHandling.NumberOfOptions)
		{
			"Log error, and prevent other saves from loading",
			"Log error, but allow other saves to load",
			"Log warning, and allow other saves to load",
			"Log in console, and allow other saves to load",
			"Don't log, allow other saves to load"
		};

		Label statusLabel;
		Button settingsActionButton;

		/// <summary>
		/// The root visual element generated by
		/// <seealso cref="CreateInspectorGUI"/>.
		/// </summary>
		protected VisualElement RootElement
		{
			get;
			set;
		} = null;

		/// <summary>
		/// Fills the content section of editor.
		/// </summary>
		/// <param name="content">
		/// The blank content section.
		/// Add <see cref="VisualElement"/>s in it!
		/// </param>
		protected abstract void FillContent(VisualElement content);

		/// <inheritdoc/>
		public override VisualElement CreateInspectorGUI()
		{
			// Create a tree from the UXML file.
			RootElement = new VisualElement();
			VisualTreeAsset originalTree = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>(UXML_PATH);
			originalTree.CloneTree(RootElement);

			// Setup member variables
			statusLabel = RootElement.Q<Label>("statusLabel");
			settingsActionButton = RootElement.Q<Button>("addRemoveObject");
			settingsActionButton.RegisterCallback<ClickEvent>(OnActionButtonClicked);
			UpdateSettings();

			// Setup behavior for clicking openSettings
			Button button = RootElement.Q<Button>("openSettings");
			button.RegisterCallback<ClickEvent>(e => SettingsService.OpenProjectSettings(SavesManager.SIDEBAR_PATH));

			// Grab the content element
			FillContent(RootElement.Q<VisualElement>("content"));

			// Bind to the object
			RootElement.Bind(serializedObject);
			return RootElement;
		}

		/// <summary>
		/// Helper method to setup a drop-down
		/// for the error handling enum value.
		/// </summary>
		/// <param name="content">
		/// TODO
		/// </param>
		/// <param name="variableName">
		/// TODO
		/// </param>
		/// <param name="dropDownName">
		/// TODO
		/// </param>
		protected void SetupErrorHandlingDropDown(VisualElement content, string variableName, string dropDownName)
		{
			// Setup the drop down
			DropdownField field = content.Q<DropdownField>(dropDownName);
			field.choices = ERROR_HANDLING_CHOICES;

			// Retrieve the property
			SerializedProperty property = serializedObject.FindProperty(variableName);

			// Bind the property to the drop down
			field.index = property.enumValueIndex;
			field.RegisterCallback<ChangeEvent<string>>(e =>
			{
				serializedObject.Update();
				property.enumValueIndex = field.index;
				serializedObject.ApplyModifiedProperties();
			});
		}

		/// <summary>
		/// Gets text and tooltip to display for status label.
		/// </summary>
		/// <param name="result"></param>
		/// <param name="text"></param>
		/// <param name="tooltip"></param>
		public static void GetStatusText(SavesSettingsProvider.ContainsData result, out string text, out string tooltip)
		{
			// Setup default return
			text = "! Unrecognized Asset";
			tooltip = "Was unable to convert this asset to SaveObject";

			// Change text based on result
			switch (result)
			{
				case SavesSettingsProvider.ContainsData.Yes:
					text = "O In settings";
					tooltip = "This asset is in saves settings.";
					break;
				case SavesSettingsProvider.ContainsData.No:
					text = "X Not in settings";
					tooltip = "This asset is not in saves settings.";
					break;
				case SavesSettingsProvider.ContainsData.IsVersion:
					text = "O In settings (as Version)";
					tooltip = "This asset is in saves settings as version field.";
					break;
				case SavesSettingsProvider.ContainsData.SettingsNotSetup:
					text = "! No Saves Settings";
					tooltip = "No saves settings was setup for this project.";
					break;
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="result"></param>
		/// <param name="text"></param>
		/// <param name="tooltip"></param>
		public static void GetButtonText(SavesSettingsProvider.ContainsData result, out string text, out string tooltip, out bool enableButton)
		{
			// Setup default return
			text = "(Can't Add Null)";
			tooltip = "Cannot add null into settings.";
			enableButton = false;

			// Change text based on result
			switch (result)
			{
				case SavesSettingsProvider.ContainsData.Yes:
					text = "Remove From Settings";
					tooltip = "Remove this save object from save settings.";
					enableButton = true;
					break;
				case SavesSettingsProvider.ContainsData.No:
					text = "Add Into Settings";
					tooltip = "Add this save object into saves settings.";
					enableButton = true;
					break;
				case SavesSettingsProvider.ContainsData.IsVersion:
					text = "(Can't Remove)";
					tooltip = "This save object cannot be removed from settings.";
					break;
				case SavesSettingsProvider.ContainsData.SettingsNotSetup:
					text = "(Settings Not Setup)";
					tooltip = "Saves settings needs to be setup before this object can be added to it.";
					break;
			}
		}

		void UpdateSettings()
		{
			// Check whether saveObject is already in settings
			SaveObject saveObject = target as SaveObject;
			SavesSettingsProvider.ContainsData result = SavesSettingsProvider.ContainsSaveData(saveObject);

			// Update status label
			GetStatusText(result, out string text, out string tooltip);
			statusLabel.text = text;
			statusLabel.tooltip = tooltip;

			// Update action button
			GetButtonText(result, out text, out tooltip, out bool isEnabled);
			settingsActionButton.text = text;
			settingsActionButton.tooltip = tooltip;
			settingsActionButton.SetEnabled(isEnabled);
		}

		void OnActionButtonClicked(ClickEvent e)
		{
			// Check whether saveObject is already in settings
			SaveObject saveObject = target as SaveObject;
			SavesSettingsProvider.ContainsData result = SavesSettingsProvider.ContainsSaveData(saveObject);
			switch (result)
			{
				case SavesSettingsProvider.ContainsData.No:
					// Add object into setings
					if (SavesSettingsProvider.AddSaveData(saveObject) == 1)
					{
						EditorUtility.DisplayDialog("Success!", $"Successfully added \"{saveObject.name}\" into settings.", "OK");
						UpdateSettings();
					}
					else
					{
						EditorUtility.DisplayDialog("Fail!", $"Could not added \"{saveObject.name}\" into settings.", "OK");
					}
					break;

				case SavesSettingsProvider.ContainsData.Yes:
					// Remove object from setings
					if (SavesSettingsProvider.RemoveSaveData(saveObject) == 1)
					{
						EditorUtility.DisplayDialog("Success!", $"Successfully removed \"{saveObject.name}\" from settings.", "OK");
						UpdateSettings();
					}
					else
					{
						EditorUtility.DisplayDialog("Fail!", $"Could not remove \"{saveObject.name}\" from settings.", "OK");
					}
					break;

				default:
					EditorUtility.DisplayDialog("Error!", $"No action could be performed on settings.", "OK");
					break;
			}
		}
	}
}
