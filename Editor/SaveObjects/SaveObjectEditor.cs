using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;
using UnityEditor;
using UnityEditor.UIElements;

namespace OmiyaGames.Saves.Editor
{
	///-----------------------------------------------------------------------
	/// <remarks>
	/// <copyright file="SaveObjectEditor.cs" company="Omiya Games">
	/// The MIT License (MIT)
	/// 
	/// Copyright (c) 2022 Omiya Games
	/// 
	/// Permission is hereby granted, free of charge, to any person obtaining a copy
	/// of this software and associated documentation files (the "Software"), to deal
	/// in the Software without restriction, including without limitation the rights
	/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	/// copies of the Software, and to permit persons to whom the Software is
	/// furnished to do so, subject to the following conditions:
	/// 
	/// The above copyright notice and this permission notice shall be included in
	/// all copies or substantial portions of the Software.
	/// 
	/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	/// THE SOFTWARE.
	/// </copyright>
	/// <list type="table">
	/// <listheader>
	/// <term>Revision</term>
	/// <description>Description</description>
	/// </listheader>
	/// <item>
	/// <term>
	/// <strong>Version:</strong> 0.2.0-exp<br/>
	/// <strong>Date:</strong> 2/20/2022<br/>
	/// <strong>Author:</strong> Taro Omiya
	/// </term>
	/// <description>
	/// Initial draft.
	/// </description>
	/// </item>
	/// </list>
	/// </remarks>
	///-----------------------------------------------------------------------
	/// <summary>
	/// Abstract editor for any <seealso cref="SaveObject"/>.
	/// </summary>
	public abstract class SaveObjectEditor : UnityEditor.Editor
	{
		protected const string UXML_DIRECTORY = "Packages/com.omiyagames.saves/Editor/SaveObjects/";
		const string UXML_PATH = UXML_DIRECTORY + "BaseSaveObject.uxml";

		static readonly List<string> ERROR_HANDLING_CHOICES = new((int)ErrorHandling.NumberOfOptions)
		{
			"Log error, and prevent other saves from loading",
			"Log error, but allow other saves to load",
			"Log warning, and allow other saves to load",
			"Log in console, and allow other saves to load",
			"Don't log, allow other saves to load"
		};

		/// <summary>
		/// The root visual element generated by
		/// <seealso cref="CreateInspectorGUI"/>.
		/// </summary>
		protected VisualElement RootElement
		{
			get;
			set;
		} = null;

		/// <summary>
		/// Fills the content section of editor.
		/// </summary>
		/// <param name="content">
		/// The blank content section.
		/// Add <see cref="VisualElement"/>s in it!
		/// </param>
		protected abstract void FillContent(VisualElement content);

		/// <inheritdoc/>
		public override VisualElement CreateInspectorGUI()
		{
			// Create a tree from the UXML file.
			RootElement = new VisualElement();
			VisualTreeAsset originalTree = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>(UXML_PATH);
			originalTree.CloneTree(RootElement);

			// Grab the content element
			FillContent(RootElement.Q<VisualElement>("content"));

			// Bind to the object
			RootElement.Bind(serializedObject);
			return RootElement;
		}

		/// <summary>
		/// Helper method to setup a drop-down
		/// for the error handling enum value.
		/// </summary>
		/// <param name="content">
		/// TODO
		/// </param>
		/// <param name="variableName">
		/// TODO
		/// </param>
		/// <param name="dropDownName">
		/// TODO
		/// </param>
		protected void SetupErrorHandlingDropDown(VisualElement content, string variableName, string dropDownName)
		{
			// Setup the drop down
			DropdownField field = content.Q<DropdownField>(dropDownName);
			field.choices = ERROR_HANDLING_CHOICES;

			// Retrieve the property
			SerializedProperty property = serializedObject.FindProperty(variableName);

			// Bind the property to the drop down
			field.index = property.enumValueIndex;
			field.RegisterCallback<ChangeEvent<int>>(e =>
			{
				property.enumValueIndex = e.newValue;
			});
		}
	}
}
